# Windows Azure Linux Agent
#
# Copyright 2018 Microsoft Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Requires Python 2.6+ and Openssl 1.0+
#
import os

from tests.lib.tools import AgentTestCase, data_dir, patch
from azurelinuxagent.ga.certificates import write_root_certificates
from azurelinuxagent.common.exception import ExtensionDisallowedError
from azurelinuxagent.ga.signature_validation import validate_signature


class TestSignatureValidation(AgentTestCase):
    def setUp(self):
        AgentTestCase.setUp(self)
        write_root_certificates()
        self.null_ext_zip_path = os.path.join(data_dir, "signing/NullExtension.zip")
        self.null_ext_signature = ""

    def tearDown(self):
        patch.stopall()
        AgentTestCase.tearDown(self)

    def test_should_validate_signature_successfully(self):
        result = validate_signature(self.null_ext_zip_path, self.null_ext_signature)
        self.assertTrue(result)

    def test_should_raise_error_if_signature_is_invalid(self):
        # This is a correctly-formatted signature for a different extension (CSE)
        invalid_signature = ""
        with self.assertRaises(ExtensionDisallowedError):
            validate_signature(self.null_ext_zip_path, invalid_signature)

    def test_should_raise_error_if_package_is_invalid(self):
        # This is the null extension zip package with one byte modified
        modified_ext = os.path.join(data_dir, "signing/NullExtensionModified.zip")
        with self.assertRaises(ExtensionDisallowedError):
            validate_signature(modified_ext, self.null_ext_signature)

    def test_should_raise_error_on_invalid_root_certificate(self):
        invalid_root_cert_path = os.path.join(data_dir, "signing/invalid_root_cert.pem")
        with patch("azurelinuxagent.ga.signature_validation.conf.get_microsoft_root_certificate_path", return_value=invalid_root_cert_path):
            with self.assertRaises(ExtensionDisallowedError):
                validate_signature(self.null_ext_zip_path, self.null_ext_signature)

    def test_should_raise_error_on_missing_root_certificate(self):
        root_cert_path = os.path.join(self.tmp_dir, "missing_root_cert.pem")
        if os.path.exists(root_cert_path):
            os.remove(root_cert_path)

        with patch("azurelinuxagent.ga.signature_validation.conf.get_microsoft_root_certificate_path", return_value=root_cert_path):
            with self.assertRaises(ExtensionDisallowedError):
                validate_signature(self.null_ext_zip_path, self.null_ext_signature)