# variables:
  #
  # NOTE: When creating the pipeline, "connection_info" must be added as a variable pointing to the
  #        cloud specific service connection; see wiki for details.
  #

parameters:
    #
    # See the test wiki for a description of the parameters
    #
    # NOTES:
    #         * 'image', 'location' and 'vm_size' override any values in the test suites/images definition
    #            files. Those parameters are useful for 1-off tests, like testing a VHD or checking if
    #            an image is supported in a particular location.
    #         * Azure Pipelines do not allow empty string for the parameter value, using "-" instead.
    #
  - name: test_suites
    displayName: Test Suites (comma-separated list of test suites to run)
    type: string
    default: "-"

  - name: image
    displayName: Image (image/image set name, URN, or VHD)
    type: string
    default: "-"

  - name: location
    displayName: Location (region)
    type: string
    default: "-"

  - name: vm_size
    displayName: VM size
    type: string
    default: "-"

  - name: collect_logs
    displayName: Collect logs from test VMs
    type: string
    default: failed
    values:
    - always
    - failed
    - no

  - name: collect_lisa_logs
    displayName: Collect LISA logs
    type: boolean
    default: false

  - name: keep_environment
    displayName: Keep the test VMs (do not delete them)
    type: string
    default: failed
    values:
    - always
    - failed
    - no

pool:
  name: waagent-pool

jobs:
  - job: "ExecuteTests"
    timeoutInMinutes: 90

    steps:
      - task: UsePythonVersion@0
        displayName: "Set Python Version"
        inputs:
          versionSpec: '3.10'
          addToPath: true
          architecture: 'x64'

      # Extract the Azure cloud from the "connection_info" variable. Its value includes one of
      # 'public', 'china', or 'gov' as a suffix (the suffix comes after the '.').
      - bash: |
          case $(echo $CONNECTION_INFO | sed 's/.*\.//') in
              public)
                  echo "##vso[task.setvariable variable=cloud]AzureCloud"
                  ;;
              china)
                  echo "##vso[task.setvariable variable=cloud]AzureChinaCloud"
                  
                  ;;
              gov)
                  echo "##vso[task.setvariable variable=cloud]AzureUSGovernment"
                  ;;
              *)
                  echo "Invalid CONNECTION_INFO: $CONNECTION_INFO" >&2
                  exit 1
                  ;;
          esac
        displayName: "Set Cloud type"

      - task: DownloadSecureFile@1
        name: downloadSshKey
        displayName: "Download SSH key"
        inputs:
          secureFile: 'id_rsa'

      - task: AzureKeyVault@2
        displayName: "Fetch connection info"
        inputs:
          azureSubscription: $(connection_info)
          KeyVaultName: 'waagenttests'
          SecretsFilter: '*'

      - task: AzureCLI@2
        displayName: "Download connection certificate"
        inputs:
          azureSubscription: $(connection_info)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            # This temporary directory removed after the pipeline execution
            mkdir -p $(Agent.TempDirectory)/app
            az keyvault secret download --file $(Agent.TempDirectory)/app/cert.pem --vault-name waagenttests --name AZURE-CLIENT-CERTIFICATE

      - bash: $(Build.SourcesDirectory)/tests_e2e/pipeline/scripts/execute_tests.sh
        displayName: "Execute tests"
        continueOnError: true
        env:
          SUBSCRIPTION_ID: $(SUBSCRIPTION-ID)
          AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
          AZURE_TENANT_ID: $(AZURE-TENANT-ID)
          CR_USER: $(CR-USER)
          CR_SECRET: $(CR-SECRET)
          CLOUD: ${{ variables.cloud }}
          COLLECT_LOGS: ${{ parameters.collect_logs }}
          IMAGE: ${{ parameters.image }}
          KEEP_ENVIRONMENT: ${{ parameters.keep_environment }}
          LOCATION: ${{ parameters.location }}
          TEST_SUITES: ${{ parameters.test_suites }}
          VM_SIZE: ${{ parameters.vm_size }}

      - bash: $(Build.SourcesDirectory)/tests_e2e/pipeline/scripts/collect_artifacts.sh
        displayName: "Collect test artifacts"
        # Collect artifacts even if the previous step is cancelled (e.g. timeout)
        condition: always()
        env:
          COLLECT_LISA_LOGS: ${{ parameters.collect_lisa_logs }}

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: 'artifacts'
        displayName: 'Publish test artifacts'
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish test results'
        condition: always()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'runbook_logs/agent.junit.xml'
          searchFolder: $(Build.ArtifactStagingDirectory)
          failTaskOnFailedTests: true

