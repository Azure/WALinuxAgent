# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- develop

variables:
  vmName: 'larohra-simpleLinuxVM'
  adminUsername: 'larohra'
  SSH_PUBLIC: "$(sshPublicKey)" # set in GUI variables
  rgName: 'larohra-dcr-v2-test$(Build.BuildId)'

  # Cloud Data
  azureConnection: 'AzLinux DCR Public (8e037ad4-618f-4466-8bc8-5099d41ac15b)'
  subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'
  location: 'East US 2'

  fairfaxConn: 'VMGuestAgentAndExtensionsFairfax (8e5abcac-74f0-4955-9dfb-fe3fe36f8d19)'
  fairfaxSub: '8e5abcac-74f0-4955-9dfb-fe3fe36f8d19'

  mooncakeConn: 'Guest Agent Mooncake ( 557a8daa-8ac8-4caa-88e4-3b6f939978b9 )'
  mooncakeSub: '557a8daa-8ac8-4caa-88e4-3b6f939978b9'

#  azureConnection: '$(mooncakeConn)'
#  subId: '557a8daa-8ac8-4caa-88e4-3b6f939978b9'
#  location: 'china north 2'
  # azureConnection: 'VMGuestAgentAndExtensionsFairfax (8e5abcac-74f0-4955-9dfb-fe3fe36f8d19)' #'AzLinux DungeonCrawler(8e037ad4-618f-4466-8bc8-5099d41ac15b)'
  # subId: '8e5abcac-74f0-4955-9dfb-fe3fe36f8d19' #'8e037ad4-618f-4466-8bc8-5099d41ac15b'
  # location: 'usgovarizona' # 'East US 2'

pool: #larohra-dcrvmsspool
  vmImage: ubuntu-latest

stages:
# - stage: "Setup"

#   jobs:
#
#   - job: "PrintMetadata"
#     steps:
#       - script: |
#           ip -4 -o address
#           wget -O - -q icanhazip.com
#         displayName: 'IP'

#       - task: Bash@3
#         inputs:
#           targetType: 'inline'
#           script: 'echo ''-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'''
#         displayName: "Parameters"

- stage: "Execute"
  variables:
    agentVersion: "9.9.9.9"
    listOfScenarios: "{
      'scenarioA': {
        'scenarioName': 'scenarioA'
      },
      'scenarioB': {
        'scenarioName': 'scenarioB'
      },
      'scenarioC': {
        'scenarioName': 'scenarioC'
      },
      'scenarioD': {
        'scenarioName': 'scenarioD'
      },
      'scenarioE': {
        'scenarioName': 'scenarioE'
      }
    }"

  jobs:
  - job: "CreateVM"

    strategy:
       matrix: $[ variables.listOfScenarios ]
#         PublicCloud:
#           azConnect: '${{ variables.publicConn }}'
#           subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'
#           location: 'East US 2'
#         ChinaCloud:
#           azConnect: '${{variables.mooncakeConn}}'
#           subId: '557a8daa-8ac8-4caa-88e4-3b6f939978b9'
#           location: 'china north 2'
#         USGovCloud:
#           azConnect: '${{ variables.fairfaxConn }}'
#           subId: '8e5abcac-74f0-4955-9dfb-fe3fe36f8d19'
#           location: 'usgovarizona'
       maxParallel: 5
    
    steps:
    - task: InstallSSHKey@0
      displayName: 'Install SSH Key to agent'
      name: "InstallKey"
      inputs:
        knownHostsEntry: '$(SSH_PUBLIC)'
        sshPublicKey: '$(SSH_PUBLIC)'
        sshKeySecureFile: 'id_rsa'

    - script: |
        # echo "$(armDeploymentOutput)"
        echo "AZConn: $(azConnect); Sub: $(subId); Location: $(location)"
        rm -rf ~/.ssh/known_hosts
      displayName: "Clear known host keys in Orchestrator"

    - script: |
          # Build the agent package in the container and just transfer out the zip
          bash $(Build.SourcesDirectory)/dcr/build_agent_zip.sh
      displayName: "Build Agent ZIP"
      name: "agentZip"

#    - template: dcr/templates/arm-resources.yml
#      parameters:
##        azConn: '$(azConnect)'
##        subId: '$(subId)'
#        location: '$(location)'

    - task: AzureResourceManagerTemplateDeployment@3
      name: "deployVM"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(azureConnection)'
        subscriptionId: '$(subId)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(rgName)-$(scenarioName)'
        location: '$(location)'
        templateLocation: 'URL of the file'
        csmFileLink: 'https://bootdiagsokypwackoodny.blob.core.windows.net/testlinuxagentarm/simple-linux-vm.json?sp=r&st=2021-08-04T23:41:34Z&se=2021-09-04T07:41:34Z&spr=https&sv=2020-08-04&sr=b&sig=Ol0su7i90irDy1EzL7Etemop%2FCfAlZjp2ZH4FfmeWlQ%3D'
        overrideParameters: '-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'
        deploymentMode: 'Complete'
        deploymentOutputs: 'armDeploymentOutput'

    - script: |
        n=0
        ec=1
        until [ "$n" -ge 5 ]
        do
            scp -o StrictHostKeyChecking=no -r $(Build.SourcesDirectory)/dcr/ $(adminUsername)@$(armDeploymentOutput.hostname.value):~/ && ec=0 && break  # substitute your command here
            n=$((n+1))
            sleep 3
        done
        exit $ec
      displayName: 'SCP command'

    - script: |
        n=0
        ec=1
        until [ "$n" -ge 5 ]
        do
            ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/setup.sh $(agentVersion)" && ec=0 && break  # substitute your command here
            n=$((n+1))
            sleep 3
        done
        exit $ec
      displayName: 'SSH command'

    - template: dcr/templates/run-test.yml

#    - script: |
#        ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/run_pytest.sh /home/$(adminUsername)/test_results/"
##        n=0
##        ec=1
##        until [ "$n" -ge 5 ]
##        do
##             && ec=0 && break
##            n=$((n+1))
##            sleep 3
##        done
##        exit $ec
#      displayName: 'Run Pytest on VM'

    - script: |
        n=0
        ec=1
        until [ "$n" -ge 5 ]
        do
            scp -o StrictHostKeyChecking=no -r $(adminUsername)@$(armDeploymentOutput.hostname.value):/home/$(adminUsername)/test_results/test-*.xml $(Build.ArtifactStagingDirectory)/ && ec=0 && break
            n=$((n+1))
            sleep 3
        done
        exit $ec
      condition: succeededOrFailed()
      displayName: 'Get test-xml files'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-*.xml'
        testRunTitle: 'Publish test results for $(scenarioName)'

#    - task: AzureCLI@2
#    #   condition: succeeded('deployVM')
#      displayName: "Get instance view"
#      inputs:
#        azureSubscription: $(azureConnection)
#        scriptType: 'bash'
#        scriptLocation: 'inlineScript'
#        inlineScript: 'az vm get-instance-view --ids $(az vm list -g $(rgName) --query "[].id" -o tsv)'

- stage: "Cleanup"
  condition: succeededOrFailed()
  # variables:
  #   createVMPass: $[ stageDependencies.Setup.BuildAgent.outputs['agentZip.agentVersion'] ]
  jobs:
  - job: "Wait"
    # condition: succeeded("CreateVM")
    pool: server
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 5
        inputs:
          notifyUsers: 'larohra'
          onTimeout: 'resume'

  - job: "DeleteRG"
    dependsOn: "Wait"
    condition: always()
    strategy:
       matrix: $(listOfScenarios)
#         PublicCloud:
#           azConnect: '${{ variables.publicConn }}'
#           subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'
#           location: 'East US 2'
#         ChinaCloud:
#           azConnect: '${{ variables.mooncakeConn }}'
#           subId: '557a8daa-8ac8-4caa-88e4-3b6f939978b9'
#           location: 'china north 2'
#         USGovCloud:
#           azConnect: '${{ variables.fairfaxConn }}'
#           subId: '8e5abcac-74f0-4955-9dfb-fe3fe36f8d19'
#           location: 'usgovarizona'
       maxParallel: 10
    steps:
#      - template: dcr/templates/arm-delete.yml
#        parameters:
#           location: $(location)
##          azConn: $(azConnect)
##          subId: $(subId)
      - task: AzureResourceManagerTemplateDeployment@3
        condition: succeededOrFailed()
        displayName: "Delete test RG"
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: '$(azureConnection)' # $(azureConnection)
          subscriptionId: '$(subId)'
          action: 'DeleteRG'
          resourceGroupName: '$(rgName)-$(scenarioName)'