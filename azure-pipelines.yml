# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- develop

variables:
  vmName: 'larohra-simpleLinuxVM'
  adminUsername: 'larohra'
  SSH_PUBLIC: "$(sshPublicKey)" # set in GUI variables
  rgName: 'larohra-dcr-v2-test$(Build.BuildId)'
  azureConnection: 'AzLinux DungeonCrawler(8e037ad4-618f-4466-8bc8-5099d41ac15b)'
  subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'

pool:
  vmImage: ubuntu-latest

stages:
- stage: "Setup"

  jobs:
  - job: "InstallSSHKeys"
    steps:
      - task: InstallSSHKey@0
        displayName: 'Install SSH Key to agent'
        inputs:
          knownHostsEntry: 'ssh-keyscan -t rsa github.com'
          sshPublicKey: '$(SSH_PUBLIC)'
          sshKeySecureFile: 'id_rsa'
      
      - script: |
          echo "$(armDeploymentOutput)"
          # rm -rf ~/.ssh/known_hosts
        displayName: "Clear known host keys in Orchestrator"

  - job: "PrintMetadata"
    steps:
      - script: |
          ip -4 -o address
          wget -O - -q icanhazip.com
        displayName: 'IP'
        
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: 'echo ''-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'''
        displayName: "Parameters"

  - job: "BuildAgent" 
    steps:
      - script: | 
          # Build the agent package in the container and just transfer out the zip 
          bash $(Build.SourcesDirectory)/dcr/build_agent_zip.sh
        displayName: "Build Agent ZIP"
        name: "agentZip"

- stage: "Execute"
  variables:
    agentVersion: $[ stageDependencies.Setup.BuildAgent.outputs['agentZip.agentVersion'] ]
  jobs:
  - job: "CreateVM"
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      name: "deployVM"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureConnection)
        subscriptionId: $(subId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(rgName)'
        location: 'East US 2'
        templateLocation: 'URL of the file'
        csmFileLink: 'https://bootdiagsokypwackoodny.blob.core.windows.net/testlinuxagentarm/simple-linux-vm.json?sp=r&st=2021-07-22T18:59:28Z&se=2021-08-01T02:59:28Z&spr=https&sv=2020-08-04&sr=b&sig=eHKXUdBoY2KPqQr3Xs%2FfPCa6yVF%2BGFgDPHRzoip9qbU%3D'
        overrideParameters: '-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'
        deploymentMode: 'Complete'
        deploymentOutputs: 'armDeploymentOutput'
        
    - script: |
        scp -o StrictHostKeyChecking=no -r $(Build.SourcesDirectory)/dcr/ $(adminUsername)@$(armDeploymentOutput.hostname.value):~/ 
        ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/setup.sh $(agentVersion)"
      displayName: 'Run SSH command'

  - job: "VerifyVM"
    dependsOn: "CreateVM"
    steps:

      - task: AzureCLI@2
        displayName: "Get instance view"
        inputs:
          azureSubscription: $(azureConnection)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az vm get-instance-view --ids $(az vm list -g $(rgName) --query "[].id" -o tsv)'

- stage: "Cleanup"
  condition: succeededOrFailed()
  variables:
    createVMPass: $[ stageDependencies.Setup.BuildAgent.outputs['agentZip.agentVersion'] ]
  jobs: 
  - job: "Wait"
    pool: server
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 120
        inputs:
          notifyUsers: 'larohra'
          onTimeout: 'resume'

  - job: "DeleteRG"
    dependsOn: "Wait"
    condition: always()
    steps:
      - task: AzureResourceManagerTemplateDeployment@3
        condition: succeededOrFailed()
        displayName: "Delete test RG"
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: $(azureConnection)
          subscriptionId: $(subId)
          action: 'DeleteRG'
          resourceGroupName: '$(rgName)'