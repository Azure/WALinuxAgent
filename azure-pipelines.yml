# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- develop

variables:
  vmName: 'larohra-simpleLinuxVM'
  adminUsername: 'larohra'
  SSH_PUBLIC: "$(sshPublicKey)" # set in GUI variables
  rgName: 'larohra-dcr-v2-test$(Build.BuildId)'
  publicConn: 'AzLinux DCR Public (8e037ad4-618f-4466-8bc8-5099d41ac15b)'
  fairfaxConn: 'VMGuestAgentAndExtensionsFairfax (8e5abcac-74f0-4955-9dfb-fe3fe36f8d19)'
  mooncakeConn: 'Guest Agent Mooncake ( 557a8daa-8ac8-4caa-88e4-3b6f939978b9 )'
  # azureConnection: ''
  # azureConnection: 'VMGuestAgentAndExtensionsFairfax (8e5abcac-74f0-4955-9dfb-fe3fe36f8d19)' #'AzLinux DungeonCrawler(8e037ad4-618f-4466-8bc8-5099d41ac15b)'
  # subId: '8e5abcac-74f0-4955-9dfb-fe3fe36f8d19' #'8e037ad4-618f-4466-8bc8-5099d41ac15b'
  # location: 'usgovarizona' # 'East US 2'

pool: #larohra-dcrvmsspool
  vmImage: ubuntu-latest

stages:
# - stage: "Setup"

#   jobs:
#
#   - job: "PrintMetadata"
#     steps:
#       - script: |
#           ip -4 -o address
#           wget -O - -q icanhazip.com
#         displayName: 'IP'

#       - task: Bash@3
#         inputs:
#           targetType: 'inline'
#           script: 'echo ''-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'''
#         displayName: "Parameters"

- stage: "Execute"
  variables:
    agentVersion: "9.9.9.9"
  jobs:
  - job: "CreateVM"
    variables:
      azureConnection: '$(publicConn)'
      subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'
      location: 'East US 2'
    # strategy:
    #   matrix:
    #     PublicCloud:
    #       azureConnection: '$(publicConn)'
    #       subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'
    #       location: 'East US 2'
        # ChinaCloud:
        #   azureConnection: '$(mooncakeConn)'
        #   subId: '557a8daa-8ac8-4caa-88e4-3b6f939978b9'
        #   location: 'china north 2'
        # USGovCloud:
        #   azureConnection: '$(fairfaxConn)'
        #   subId: '8e5abcac-74f0-4955-9dfb-fe3fe36f8d19'
        #   location: 'usgovarizona'
      maxParallel: 3
    
    steps:
    - task: InstallSSHKey@0
      displayName: 'Install SSH Key to agent'
      name: "InstallKey"
      inputs:
        knownHostsEntry: '$(SSH_PUBLIC)'
        sshPublicKey: '$(SSH_PUBLIC)'
        sshKeySecureFile: 'id_rsa'

    - script: |
        # echo "$(armDeploymentOutput)"
        echo "AZConn: $(azureConnection); Sub: $(subId); Location: $(location)"
        rm -rf ~/.ssh/known_hosts
      displayName: "Clear known host keys in Orchestrator"

    - script: |
          # Build the agent package in the container and just transfer out the zip
          bash $(Build.SourcesDirectory)/dcr/build_agent_zip.sh
      displayName: "Build Agent ZIP"
      name: "agentZip"

    - task: AzureResourceManagerTemplateDeployment@3
      name: "deployVM"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '${{variables.azureConnection}}'  # $(azureConnection)
        subscriptionId: '$(subId)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(rgName)'
        location: '$(location)'
        templateLocation: 'URL of the file'
        csmFileLink: 'https://bootdiagsokypwackoodny.blob.core.windows.net/testlinuxagentarm/simple-linux-vm.json?sp=r&st=2021-07-22T18:59:28Z&se=2021-08-01T02:59:28Z&spr=https&sv=2020-08-04&sr=b&sig=eHKXUdBoY2KPqQr3Xs%2FfPCa6yVF%2BGFgDPHRzoip9qbU%3D'
        overrideParameters: '-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'
        deploymentMode: 'Complete'
        deploymentOutputs: 'armDeploymentOutput'

    - script: |
        n=0
        until [ "$n" -ge 5 ]
        do
            scp -o StrictHostKeyChecking=no -r $(Build.SourcesDirectory)/dcr/ $(adminUsername)@$(armDeploymentOutput.hostname.value):~/ && break  # substitute your command here
            n=$((n+1))
            sleep 3
        done
      displayName: 'SCP command'

    - script: |
        n=0
        until [ "$n" -ge 5 ]
        do
            ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/setup.sh $(agentVersion)" && break  # substitute your command here
            n=$((n+1))
            sleep 3
        done
      displayName: 'SSH command'

    - script: |
        ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/run_pytest.sh /home/$(adminUsername)/test_results/"
#        n=0
#        ec=1
#        until [ "$n" -ge 5 ]
#        do
#             && ec=0 && break
#            n=$((n+1))
#            sleep 3
#        done
#        exit $ec
      displayName: 'Run Pytest on VM'

    - script: |
        n=0
        ec=1
        until [ "$n" -ge 5 ]
        do
            scp -o StrictHostKeyChecking=no -r $(adminUsername)@$(armDeploymentOutput.hostname.value):/home/$(adminUsername)/test_results/test-*.xml $(Build.ArtifactStagingDirectory)/ && ec=0 && break
            n=$((n+1))
            sleep 3
        done
        exit $ec
      condition: succeededOrFailed()
      displayName: 'Get test-xml files'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-*.xml'
        testRunTitle: 'Publish test results for Test'

#    - task: AzureCLI@2
#    #   condition: succeeded('deployVM')
#      displayName: "Get instance view"
#      inputs:
#        azureSubscription: $(azureConnection)
#        scriptType: 'bash'
#        scriptLocation: 'inlineScript'
#        inlineScript: 'az vm get-instance-view --ids $(az vm list -g $(rgName) --query "[].id" -o tsv)'

- stage: "Cleanup"
  condition: succeededOrFailed()
  # variables:
  #   createVMPass: $[ stageDependencies.Setup.BuildAgent.outputs['agentZip.agentVersion'] ]
  jobs:
  - job: "Wait"
    # condition: succeeded("CreateVM")
    pool: server
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 120
        inputs:
          notifyUsers: 'larohra'
          onTimeout: 'resume'

  - job: "DeleteRG"
    dependsOn: "Wait"
    condition: always()
    variables:
      azureConnection: '$(publicConn)'
      subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'
    # strategy:
    #   matrix:
    #     PublicCloud:
    #       azureConnection: '$(publicConn)'
    #       subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'
    #       location: 'East US 2'
    #     ChinaCloud:
    #       azureConnection: '$(mooncakeConn)'
    #       subId: '557a8daa-8ac8-4caa-88e4-3b6f939978b9'
    #       location: 'china north 2'
    #     USGovCloud:
    #       azureConnection: '$(faifaxConn)'
    #       subId: '8e5abcac-74f0-4955-9dfb-fe3fe36f8d19'
    #       location: 'usgovarizona'
    #   maxParallel: 3

    steps:
      - task: AzureResourceManagerTemplateDeployment@3
        condition: succeededOrFailed()
        displayName: "Delete test RG"
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: $(azureConnection)
          subscriptionId: $(subId)
          action: 'DeleteRG'
          resourceGroupName: '$(rgName)'