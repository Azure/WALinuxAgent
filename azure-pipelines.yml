# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- develop

variables:
  vmName: 'larohra-simpleLinuxVM'
  adminUsername: 'larohra'
  SSH_PUBLIC: "$(sshPublicKey)" # set in GUI variables
  rgName: 'larohra-dcr-v2-test$(Build.BuildId)'
  azureConnection: 'AzLinux DungeonCrawler(8e037ad4-618f-4466-8bc8-5099d41ac15b)'
  subId: '8e037ad4-618f-4466-8bc8-5099d41ac15b'

pool:
  vmImage: ubuntu-latest

jobs:
- job: "SetupVM"
  steps:
    - task: InstallSSHKey@0
      displayName: 'Install SSH Key to agent'
      inputs:
        knownHostsEntry: '$(SSH_PUBLIC)'
        sshPublicKey: '$(SSH_PUBLIC)'
        sshKeySecureFile: 'id_rsa'

    - script: |
        ip -4 -o address
        wget -O - -q icanhazip.com
      displayName: 'IP'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'echo ''-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'''
      displayName: "Print parameters"
    
    - task: AzureResourceManagerTemplateDeployment@3
      name: "deployVM"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureConnection)
        subscriptionId: $(subId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(rgName)'
        location: 'East US 2'
        templateLocation: 'URL of the file'
        csmFileLink: 'https://bootdiagsokypwackoodny.blob.core.windows.net/testlinuxagentarm/simple-linux-vm.json?sp=r&st=2021-07-22T18:59:28Z&se=2021-08-01T02:59:28Z&spr=https&sv=2020-08-04&sr=b&sig=eHKXUdBoY2KPqQr3Xs%2FfPCa6yVF%2BGFgDPHRzoip9qbU%3D'
        overrideParameters: '-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)"'
        deploymentMode: 'Complete'
        deploymentOutputs: 'armDeploymentOutput'
    
    - script: |
       echo "$(armDeploymentOutput)"
       rm -rf ~/.ssh/known_hosts
    #    ssh-keygen -R $(armDeploymentOutput.hostname.value)
      displayName: "Clear known host keys"

    - script: |
        # command="ssh -o StrictHostKeyChecking no $(adminUsername)@$(armDeploymentOutput.hostname.value) dcr/setup.sh $(Build.SourcesDirectory)"
        max_retry=5
        counter=0
        until ssh -o StrictHostKeyChecking no $(adminUsername)@$(armDeploymentOutput.hostname.value) dcr/setup.sh $(Build.SourcesDirectory)
        do
          sleep 1
          [[ counter -eq $max_retry ]] && echo "Failed!" && exit 1
          echo "Trying again. Try #$counter"
          ((counter++))
        done
      displayName: 'Run SSH command'

    - task: AzureCLI@2
      displayName: "Get instance view"
      inputs:
        azureSubscription: $(azureConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az vm get-instance-view --ids $(az vm list -g $(rgName) --query "[].id" -o tsv)'

- job: "Wait"
  dependsOn: "SetupVM"
  condition: succeededOrFailed()
  pool: server
  steps:
    - task: ManualValidation@0
      timeoutInMinutes: 120
      inputs:
        notifyUsers: 'larohra'
        onTimeout: 'resume'

- job: "DeleteRG"
  dependsOn: "Wait"
  condition: succeededOrFailed()
  steps:
    - task: AzureResourceManagerTemplateDeployment@3
      condition: succeededOrFailed()
      displayName: "Delete test RG"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureConnection)
        subscriptionId: $(subId)
        action: 'DeleteRG'
        resourceGroupName: '$(rgName)'
