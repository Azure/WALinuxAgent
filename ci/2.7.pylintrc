# python2.7 uses pylint 1.9.5, whose docs can be found here: http://pylint.pycqa.org/en/1.9/technical_reference/features.html#messages
# python3.4 uses pylint 2.3.1, whose docs can be found here: http://pylint.pycqa.org/en/pylint-2.3.1/technical_reference/features.html

# The source code suppresses the following error types common between python2.7 and python3.4:

# attribute-defined-outside-init<W0201>: (hi-pri) Used when an instance attribute is defined outside the __init__ method.
# bad-open-mode<W1501>: (hi-pri) Python supports: r, w, a[, x] modes with b, +, and U (only with r) options.
# bad-super-call<E1003>: (hi-pri) Used when another argument than the current class is given as first argument of the super builtin.
# bare-except<W0702>: (hi-pri) Used when an except clause doesn't specify exceptions type to catch.
# cell-var-from-loop<W0640>: (hi-pri) A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.
# expression-not-assigned<W0106>: (hi-pri) Used when an expression that is not a function call is assigned to nothing.
# function-redefined<E0102>: (hi-pri) Used when a function / class / method is redefined.
# global-statement<W0603>: Used when you use the "global" statement to update a global variable.
# import-error<E0401>: (hi-pri) Used when pylint has been unable to import a module.
# keyword-arg-before-vararg<W1113>: (hi-pri) When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.
# no-member<E1101>: (hi-pri) Used when a variable is accessed for an unexistent member.
# no-name-in-module<E0611>: (hi-pri) Used when a name cannot be found in a module.
# no-value-for-parameter<E1120>: (hi-pri) Used when a function call passes too few arguments.
# pointless-statement<W0104>: (hi-pri) Used when a statement doesn’t have (or at least seems to) any effect.
# pointless-string-statement<W0105>: (hi-pri) Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.
# protected-access<W0212>: Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.
# raising-format-tuple<W0715>: (hi-pri) Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting
# redefined-builtin<W0622>: (hi-pri) Used when a variable or function override a built-in.
# redefined-outer-name<W0621>: (hi-pri) Used when a variable's name hides a name defined in the outer scope.
# redundant-unittest-assert<W1503>: (hi-pri) The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true.
# super-init-not-called<W0231>: (hi-pri) Used when an ancestor class method has an __init__ method which is not called by a derived class.
# unnecessary-lambda<W0108>: Used when the body of a lambda expression is a function call on the same argument list as the lambda itself
# unnecessary-pass<W0107>: (hi-pri) Used when a "pass" statement that can be avoided is encountered.
# unused-argument<W0613>: (hi-pri) Used when a function or method argument is not used.
# unused-import<W0611>: (hi-pri) Used when an imported module or variable is not used.
# unused-variable<W0612>: (hi-pri) Used when a variable is defined but not used.
# useless-else-on-loop<W0120>: (hi-pri) Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.
# useless-super-delegation<W0235>: Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.

# The source code suppresses the following error codes specifically for python2.7:

# no-init<W0232>: (needs review) Used when a class has no __init__ method, neither its parent classes.
# undefined-loop-variable<W0631>: (needs review) Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.
# unsubscriptable-object<E1136>: (hi-pri) Emitted when a subscripted value doesn’t support subscription(i.e. doesn’t define __getitem__ method)

# The source code suppresses the following error codes specifically for python3.4:

# duplicate-string-formatting-argument<W1308>: (hi-pri) Used when we detect that a string formatting is repeating an argument instead of using named string arguments
# implicit-str-concat-in-sequence<W1403>: (hi-pri) String literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?
# subprocess-popen-preexec-fn<W1509>: (hi-pri) The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called.


[MESSAGES CONTROL]

disable=C,R, # (C) convention, for programming standard violation (R) refactor, for bad code smell
    bad-continuation, # Buggy, **REMOVED in pylint-2.6.0**
    bad-option-value, # pylint does not recognize the error code/symbol (needed to supress breaking changes across pylint versions)
    bad-whitespace, # Used when a wrong number of spaces is used around an operator, bracket or block opener.
    broad-except, # Used when an except catches a too general exception, possibly burying unrelated errors.
    deprecated-lambda, # Used when a lambda is the first argument to “map” or “filter”. It could be clearer as a list comprehension or generator expression. (2.7 only)
    missing-docstring, # Used when a module, function, class or method has no docstring
    old-style-class, # Used when a class is defined that does not inherit from another class and does not inherit explicitly from “object”. (2.7 only)
    fixme, # Used when a warning note as FIXME or TODO is detected
