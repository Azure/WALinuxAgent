[MESSAGES CONTROL]

disable=C, # (C) convention, for programming standard violation
    broad-except, # W0703: *Catching too general exception %s*
    broad-exception-raised, # W0719: Raising too general exception: Exception
    consider-using-dict-comprehension, # R1717: *Consider using a dictionary comprehension*
    consider-using-from-import, # R0402: Use 'from foo import bar' instead
    consider-using-in, # R1714: *Consider merging these comparisons with "in" to %r*
    consider-using-max-builtin, # R1731: Consider using 'a = max(a, b)' instead of unnecessary if block
    consider-using-min-builtin, # R1730: Consider using 'a = min(a, b)' instead of unnecessary if block
    consider-using-set-comprehension, # R1718: *Consider using a set comprehension*
    consider-using-with, # R1732: *Emitted if a resource-allocating assignment or call may be replaced by a 'with' block*
    duplicate-code, # R0801: *Similar lines in %s files*
    fixme, # Used when a warning note as FIXME or TODO is detected
    logging-format-interpolation, # W1202: Use lazy % formatting in logging functions
    logging-fstring-interpolation, # W1203: Use lazy % or .format() formatting in logging functions
    no-else-break, # R1723: *Unnecessary "%s" after "break"*
    no-else-continue, # R1724: *Unnecessary "%s" after "continue"*
    no-else-raise, # R1720: *Unnecessary "%s" after "raise"*
    no-else-return, # R1705: *Unnecessary "%s" after "return"*
    protected-access, # W0212: Access to a protected member of a client class
    raise-missing-from, # W0707: *Consider explicitly re-raising using the 'from' keyword*
    redundant-u-string-prefix, # The u prefix for strings is no longer necessary in Python >=3.0
    simplifiable-if-expression, # R1719: *The if expression can be replaced with %s*
    simplifiable-if-statement, # R1703: *The if statement can be replaced with %s*
    super-with-arguments, # R1725: *Consider using Python 3 style super) without arguments*
    too-few-public-methods, # R0903: *Too few public methods %s/%s)*
    too-many-ancestors, # R0901: *Too many ancestors %s/%s)*
    too-many-arguments, # R0913: *Too many arguments %s/%s)*
    too-many-boolean-expressions, # R0916: *Too many boolean expressions in if statement %s/%s)*
    too-many-branches, # R0912: *Too many branches %s/%s)*
    too-many-instance-attributes, # R0902: *Too many instance attributes %s/%s)*
    too-many-locals, # R0914: *Too many local variables %s/%s)*
    too-many-nested-blocks, # R1702: *Too many nested blocks %s/%s)*
    too-many-public-methods, # R0904: *Too many public methods %s/%s)*
    too-many-return-statements, # R0911: *Too many return statements %s/%s)*
    too-many-statements, # R0915: *Too many statements %s/%s)*
    unspecified-encoding, # W1514: Using open without explicitly specifying an encoding
    use-a-generator, # R1729: *Use a generator instead '%s%s)'*
    use-yield-from, # R1737: Use 'yield from' directly instead of yielding each element one by one
    useless-object-inheritance, # R0205: *Class %r inherits from object, can be safely removed from bases in python3*
    useless-return, # R1711: *Useless return at end of function or method*
