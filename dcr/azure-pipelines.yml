parameters:
  - name: scenarios
    type: object
    default:
      - agent-bvt
      - extension-telemetry-pipeline

  - name: distros
    type: object
    default:
      - publisher: "Canonical"
        offer: "UbuntuServer"
        version: "latest"
        sku: "18.04-LTS"
        name: "ubuntu18"
        # ToDo: Figure out a better way to incorporate distro setup scripts
#        setupPath: "dcr/distros/install_pip_packages.sh"

      - publisher: "Debian"
        offer: "debian-10"
        sku: "10"
        version: "latest"
        name: "deb10"
##        setupPath: "dcr/distros/install_pip_packages.sh"
#
      - publisher: "OpenLogic"
        offer: "CentOS"
        sku: "7_9"
        version: "latest"
        name: "cent79"
##
      - publisher: "SUSE"
        offer: "sles-15-sp2-basic"
        sku: "gen1"
        version: "latest"
        name: "suse15"
##
      - publisher: "RedHat"
        offer: "RHEL"
        sku: "7-RAW"
        version: "latest"
        name: "rhel7Raw"
##
      - publisher: "microsoftcblmariner"
        offer: "cbl-mariner"
        sku: "cbl-mariner-1"
        version: "latest"
        name: "mariner1"
##
      - publisher: "microsoftcblmariner"
        offer: "cbl-mariner"
        sku: "cbl-mariner-2"
        version: "latest"
        name: "mariner2"

trigger:
  - develop

# no PR triggers
pr: none

schedules:
  - cron: "0 */8 * * *" # Run every 8 hours
    displayName: Daily validation builds
    branches:
      include:
      - develop
    always: true

variables:
  - template: templates/vars.yml

  - name: SSH_PUBLIC
    value: "$(sshPublicKey)" # set in GUI variables
  - name: rgNamePrefix
    value: "$(rgPrefix)$(Build.BuildId)"


pool: #larohra-dcrvmsspool
  vmImage: ubuntu-latest

stages:
  - stage: "Execute"
    jobs:
      - template: 'templates/setup-vm-and-execute-tests.yml'
        parameters:
          scenarios:
            - ${{ parameters.scenarios }}
          distros:
            - ${{ parameters.distros }}
          rgPrefix: $(rgNamePrefix)

  - stage: "Cleanup"
    condition: succeededOrFailed()
    jobs:
      - job: "Wait"
        pool: server
        # ToDo: Add a parameter to force wait before deleting the Test VMs
        condition: in(stageDependencies.Execute.CreateVM.result, 'Failed', 'SucceededWithIssues')
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 50
            inputs:
              notifyUsers: 'larohra'
              onTimeout: 'resume'

      - template: templates/arm-delete.yml
        parameters:
          scenarios:
            - ${{ parameters.scenarios }}
          distros:
            - ${{ parameters.distros }}
          rgPrefix: $(rgNamePrefix)