parameters:
  - name: scenarios
    type: object

  - name: distros
    type: object

  - name: rgPrefix
    type: string

jobs:
  - job: "CreateVM"
    displayName: "Setup VM and Run Test"

    strategy:
      matrix:
        ${{ each distro in parameters.distros }}:
          ${{ each scenario in parameters.scenarios }}:
            ${{ format('{0}-{1}', distro.name, scenario) }}:
              scenarioName: ${{ scenario }}
              imagePublisher: ${{ distro.publisher }}
              imageOffer: ${{ distro.offer }}
              imageSku: ${{ distro.sku }}
              imageVersion: ${{ distro.version }}
              distroName: ${{ distro.name }}
              distroSetupPath: ${{ distro.setupPath }}
              rgName: ${{ format('{0}-{1}-{2}', parameters.rgPrefix, scenario, distro.name) }}
#      matrix: $[ variables.expandedListOfScenarios ]
      maxParallel: 50

    steps:
      - task: InstallSSHKey@0
        displayName: 'Install SSH Key to agent'
        name: "InstallKey"
        inputs:
          knownHostsEntry: '$(SSH_PUBLIC)'
          sshPublicKey: '$(SSH_PUBLIC)'
          sshKeySecureFile: 'id_rsa'

      - task: AzureKeyVault@2
        displayName: "Fetch secrets from KV"
        inputs:
          azureSubscription: '$(azureConnection)'
          KeyVaultName: 'dcrV2SPs'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: UsePythonVersion@0
        displayName: "Set host python version"
        inputs:
          versionSpec: '3.7'
          addToPath: true
          architecture: 'x64'

      - script: |
          echo "IP: $(imagePublisher); IO: $(imageOffer); IS: $(imageSku); IV: $(imageVersion); $(distroName)"
          rm -rf ~/.ssh/known_hosts
          echo "##vso[task.setvariable variable=randNum;isOutput=true]$RANDOM"
        displayName: "Clear known host keys and set variables"

      - bash: $(Build.SourcesDirectory)/dcr/scripts/build_agent_zip.sh
        displayName: "Build Agent Zip"

      - bash: $(Build.SourcesDirectory)/dcr/scripts/get_pypy.sh
        displayName: "Get PyPy"
#        name: "agentZip"

      - bash: $(Build.SourcesDirectory)/dcr/scripts/move_scenario.sh
        displayName: "Move scenarios"

      - script: pip install -r $(Build.SourcesDirectory)/dcr/requirements.txt
        displayName: "Install pip modules on orchestrator"

      - script: |
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/run.py ]] && runPy=true || runPy=false
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/run.host.py ]] && runHost=true || runHost=false
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/setup.sh ]] && runScenarioSetup=true || runScenarioSetup=false
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/template.json ]] && template="scenario/template.json" || template="templates/deploy-linux-vm.json"
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/parameters.json ]] && params="scenario/parameters.json" || params="templates/deploy-linux-vm-params.json"
          echo "##vso[task.setvariable variable=runPy]$runPy"
          echo "##vso[task.setvariable variable=runHost]$runHost"
          echo "##vso[task.setvariable variable=runScenarioSetup]$runScenarioSetup"
          echo "##vso[task.setvariable variable=templateFile]$(Build.SourcesDirectory)/dcr/$template"
          echo "##vso[task.setvariable variable=parametersFile]$(Build.SourcesDirectory)/dcr/$params"
        displayName: "Check which file to run"

      - task: AzureResourceManagerTemplateDeployment@3
        name: "deployVM"
        timeoutInMinutes: 10
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: '$(azureConnection)'
          subscriptionId: '$(subId)'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(rgName)'
          location: '$(location)'
          templateLocation: 'Linked artifact'
          csmFile: '$(templateFile)'
          csmParametersFile: '$(parametersFile)'
#          csmFileLink: 'https://bootdiagsokypwackoodny.blob.core.windows.net/testlinuxagentarm/simple-linux-vm.json?sp=r&st=2021-09-07T23:06:37Z&se=2021-12-01T08:06:37Z&spr=https&sv=2020-08-04&sr=b&sig=hKxa55MTroRqIfeD2xwNOF%2FWrQvZj4GMAOKfa2%2B3634%3D'
          overrideParameters: '-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)" -imagePublisher "$(imagePublisher)" -imageOffer "$(imageOffer)" -imageSku $(imageSku) -imageVersion $(imageVersion)'
          deploymentMode: 'Complete'
          deploymentOutputs: 'armDeploymentOutput'

      - task: AzureCLI@2
        displayName: "Get VMIp"
        inputs:
          azureSubscription: '$(azureConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az vm list-ip-addresses --resource-group $(rgName) --name $(vmName) --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" --output tsv > $(Build.SourcesDirectory)/dcr/.vm_ips || echo "No VM Ips"
            az vmss list-instance-public-ips --name $(vmName) --resource-group $(rgName) --query "[].ipAddress" --output tsv > $(Build.SourcesDirectory)/dcr/.vmss_ips || echo "No VMSS IPs"

      - script: |
          printenv > $(Build.SourcesDirectory)/dcr/.env
#          echo "AZURE_CLIENT_ID=$(AZURE-CLIENT-ID)" >> $(Build.SourcesDirectory)/dcr/.env
#          echo "AZURE_CLIENT_SECRET=$(AZURE-CLIENT-SECRET)" >> $(Build.SourcesDirectory)/dcr/.env
#          echo "AZURE_TENANT_ID="$(AZURE-TENANT-ID)"" >> $(Build.SourcesDirectory)/dcr/.env
        displayName: 'Get all environment variables'

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.SourcesDirectory)/dcr/scripts/orchestrator/execute_ssh_on_vm.py'
          arguments: 'setup_vm'
        env:
          PYTHONPATH: $(Build.SourcesDirectory)
        displayName: "Setup test VM"

#      - script: |
#          echo "##vso[task.complete result=Failed;]Ending pipeline for tests"
#          n=0
#          ec=1
#          until [ "$n" -ge 5 ]
#          do
#              scp -o StrictHostKeyChecking=no -r $(Build.SourcesDirectory)/dcr/ $(adminUsername)@$(armDeploymentOutput.hostname.value):~/ && ec=0 && break  # substitute your command here
#              n=$((n+1))
#              sleep 3
#          done
#          exit $ec
#        displayName: 'Copy GA/DCR files to VM'
#
#      - script: |
#          n=0
#          ec=1
#          until [ "$n" -ge 5 ]
#          do
#              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo PYPYPATH="$(pypyPath)" bash /home/$(adminUsername)/dcr/scripts/install_pip_packages.sh /home/$(adminUsername)/dcr/requirements.txt" && ec=0 && break
#              n=$((n+1))
#              sleep 3
#          done
#          exit $ec
#        displayName: 'Setup test VM'
#
#      - script: |
#          n=0
#          ec=1
#          until [ "$n" -ge 5 ]
#          do
#              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/scripts/setup_agent.sh $(agentVersion)" && ec=0 && break  # substitute your command here
#              n=$((n+1))
#              sleep 3
#          done
#          exit $ec
#        displayName: 'Setup dev GA on VM'

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.SourcesDirectory)/dcr/scripts/orchestrator/execute_ssh_on_vm.py'
          arguments: '"sudo bash /home/$(adminUsername)/$(distroSetupPath)"'
        env:
          PYTHONPATH: $(Build.SourcesDirectory)
        condition: and(succeeded(), not(eq(variables.distroSetupPath, '')))
        displayName: 'Execute Distro Setup on test VM'

#      - script: |
#          n=0
#          ec=1
#          until [ "$n" -ge 5 ]
#          do
#              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "" && ec=0 && break
#              n=$((n+1))
#              sleep 3
#          done
#          exit $ec
#        condition: not(eq(variables.distroSetupPath, ''))
#        displayName: 'Execute Distro Setup on test VM'

#      - template: 'run-tests.yml'
#        parameters:
#          scenarioName: $(scenarioName)
#          distroSetupPath: $(distroSetupPath)
#          runPy: $(runPy)
#          runYml: $(runYml)
#          runScenarioSetup: $(runScenarioSetup)

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.SourcesDirectory)/dcr/scripts/orchestrator/execute_ssh_on_vm.py'
          arguments: '"sudo PYPYPATH=$(pypyPath) bash /home/$(adminUsername)/dcr/scenario/setup.sh"'
        env:
          PYTHONPATH: $(Build.SourcesDirectory)
        condition: and(succeeded(), eq(variables.runScenarioSetup, 'true'))
        displayName: "Install test dependencies on test VM"

#      - task: Bash@3
#        inputs:
#          targetType: 'inline'
#          script: |
#            n=0
#            ec=1
#            until [ "$n" -ge 5 ]
#            do
#                ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "" && ec=0 && break  # substitute your command here
#                n=$((n+1))
#                sleep 3
#            done
#            exit $ec
#        condition: eq(variables.runScenarioSetup, 'true')
#        displayName: "Install test dependencies on test VM"

#      - template: run-tests.yml
#        parameters:
##          ymlFilePath: ${{ format('../scenarios/{0}/run.yml', variables.scenarioName) }}
#          timesToRun: ${{ format('{0}', variables.timesToRun) }}

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.SourcesDirectory)/dcr/scenario/run.host.py'
        env:
          PYTHONPATH: $(Build.SourcesDirectory)
          # Add all KeyVault secrets explicitly as they're not added by default to the environment vars
          AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
          AZURE_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
          AZURE_TENANT_ID: $(AZURE-TENANT-ID)
        displayName: "Run the test file on the Orchestrator"
        condition: and(succeeded(), eq(variables.runHost, 'true'))

#      - script: |
#          $USEPYTHONVERSION_PYTHONLOCATION/bin/python $(Build.SourcesDirectory)/dcr/scenario/run.host.py
#        condition: and(succeededOrFailed(), eq(variables.runHost, 'true'))
#        displayName: "Run the test file on the Orchestrator"
#
#      - task: Bash@3
#        inputs:
#          targetType: 'inline'
#          script: |
#            $USEPYTHONVERSION_PYTHONLOCATION/bin/python $(Build.SourcesDirectory)/dcr/scenario/run.host.py
#        condition: and(succeededOrFailed(), eq(variables.runHost, 'true'))
#
#      - task: Bash@3
#        inputs:
#          targetType: 'inline'
#          script: |
#            $USEPYTHONVERSION_PYTHONLOCATION/bin/python $(Build.SourcesDirectory)/dcr/scenario/run.host.py
#          noProfile: false
#          noRc: false
#        condition: and(succeededOrFailed(), eq(variables.runHost, 'true'))

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.SourcesDirectory)/dcr/scripts/orchestrator/execute_ssh_on_vm.py'
          arguments: '"sudo PYTHONPATH=. $(pypyPath) dcr/scenario/run.py"'
        env:
          PYTHONPATH: $(Build.SourcesDirectory)
        condition: and(succeededOrFailed(), eq(variables.runPy, 'true'))
        displayName: "Execute test suite on VM"

#      - script: |
#          n=0
#          ec=1
#          until [ "$n" -ge 1 ]
#          do
#              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo PYTHONPATH=. $(pypyPath) dcr/scenario/run.py" && ec=0 && break  # substitute your command here
#              n=$((n+1))
#              sleep 3
#          done
#          exit $ec
#        condition: and(succeededOrFailed(), eq(variables.runPy, 'true'))
#        displayName: "Execute test suite on VM"

      # Here we will run the yml per scenario. The scenarios can specify their specifics there
#      - template: ../agent-bvt/run.yml # ${{ format('../{0}/run.yml', $(scenarioName)) }}

#      - task: PythonScript@0
#        inputs:
#          scriptSource: 'filePath'
#          scriptPath: '$(Build.SourcesDirectory)/dcr/scripts/generate_test_files.py'
#        displayName: "Generate Test Files on host"
#        condition: succeededOrFailed()

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.SourcesDirectory)/dcr/scripts/orchestrator/execute_ssh_on_vm.py'
          arguments: 'fetch_results'
        env:
          PYTHONPATH: $(Build.SourcesDirectory)
        condition: succeededOrFailed()
        displayName: 'Fetch test results'

#      - script: |
#          if scp -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value):~/test-result*.xml $(Build.ArtifactStagingDirectory) >&/dev/null ; then exit 0 ; else echo "No files found" ; fi
#        condition: succeededOrFailed()
#        displayName: 'Fetch test results'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-result*.xml'
          testRunTitle: 'Publish test results for $(scenarioName)-$(distroName)'