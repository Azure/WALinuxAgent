parameters:
  - name: scenarios
    type: object

  - name: templateScenarios
    type: object

  - name: distros
    type: object

jobs:
  - job: "CreateVM"
    displayName: "Setup VM and Run Test"

    strategy:
      matrix:
        ${{ each distro in parameters.distros }}:
          ${{ each scenario in parameters.scenarios }}:
            ${{ format('{0}-{1}', distro.name, scenario) }}:
              scenarioName: ${{ scenario }}
              imagePublisher: ${{ distro.publisher }}
              imageOffer: ${{ distro.offer }}
              imageSku: ${{ distro.sku }}
              imageVersion: ${{ distro.version }}
              distroName: ${{ distro.name }}
              distroSetupPath: ${{ distro.setupPath }}
#      matrix: $[ variables.expandedListOfScenarios ]
      maxParallel: 5

    steps:
      - task: InstallSSHKey@0
        displayName: 'Install SSH Key to agent'
        name: "InstallKey"
        inputs:
          knownHostsEntry: '$(SSH_PUBLIC)'
          sshPublicKey: '$(SSH_PUBLIC)'
          sshKeySecureFile: 'id_rsa'

      - task: AzureKeyVault@2
        displayName: "Fetch secrets from KV"
        inputs:
          azureSubscription: '$(azureConnection)'
          KeyVaultName: 'dcrV2SPs'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: UsePythonVersion@0
        displayName: "Set host python version"
        inputs:
          versionSpec: '3.8'
          addToPath: true
          architecture: 'x64'

      - script: |
          echo "IP: $(imagePublisher); IO: $(imageOffer); IS: $(imageSku); IV: $(imageVersion); $(distroName)"
          rm -rf ~/.ssh/known_hosts
          echo "##vso[task.setvariable variable=randNum;isOutput=true]$RANDOM"
        displayName: "Clear known host keys in Orchestrator"

      - script: |
          # Build the agent package in the container and just transfer out the zip and agent directory
          bash $(Build.SourcesDirectory)/dcr/scripts/build_agent_zip.sh

          # Download pypy in the container and copy over the bits to the test VM to avoid internet dependencies
          bash $(Build.SourcesDirectory)/dcr/scripts/get_pypy.sh

          # Clean out unwanted scenarios for this container, only keep the one we're running
          bash $(Build.SourcesDirectory)/dcr/scripts/move_scenario.sh
        displayName: "Build Agent ZIP and get PYPY"
        name: "agentZip"

      - task: AzureResourceManagerTemplateDeployment@3
        name: "deployVM"
        timeoutInMinutes: 10
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: '$(azureConnection)'
          subscriptionId: '$(subId)'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(rgName)-$(scenarioName)-$(distroName)'
          location: '$(location)'
          templateLocation: 'URL of the file'
          csmFileLink: 'https://bootdiagsokypwackoodny.blob.core.windows.net/testlinuxagentarm/simple-linux-vm.json?sp=r&st=2021-08-04T23:41:34Z&se=2021-09-04T07:41:34Z&spr=https&sv=2020-08-04&sr=b&sig=Ol0su7i90irDy1EzL7Etemop%2FCfAlZjp2ZH4FfmeWlQ%3D'
          overrideParameters: '-vmName "$(vmName)" -adminUsername "$(adminUsername)" -adminPasswordOrKey "$(SSH_PUBLIC)" -imagePublisher "$(imagePublisher)" -imageOffer "$(imageOffer)" -imageSku $(imageSku) -imageVersion $(imageVersion)'
          deploymentMode: 'Complete'
          deploymentOutputs: 'armDeploymentOutput'

#      - task: PythonScript@0
#        inputs:
#          scriptSource: 'inline'
#          script: |
#            import os
#            import json
#
#            with open("$(Build.SourcesDirectory)/dcr/_metadata.json", 'w') as file_:
#                    json.dump(os.environ, file_)
#        displayName: "Create metadata file"
      - script: |
          printenv > $(Build.SourcesDirectory)/dcr/.env
          echo "AZURE_CLIENT_ID=$(AZURE-CLIENT-ID)" >> $(Build.SourcesDirectory)/dcr/.env
          echo "AZURE_CLIENT_SECRET=$(AZURE-CLIENT-SECRET)" >> $(Build.SourcesDirectory)/dcr/.env
          echo "AZURE_TENANT_ID=$(AZURE-TENANT-ID)" >> $(Build.SourcesDirectory)/dcr/.env
        displayName: 'Get all environment variables'

      - script: |
          n=0
          ec=1
          until [ "$n" -ge 5 ]
          do
              scp -o StrictHostKeyChecking=no -r $(Build.SourcesDirectory)/dcr/ $(adminUsername)@$(armDeploymentOutput.hostname.value):~/ && ec=0 && break  # substitute your command here
              n=$((n+1))
              sleep 3
          done
          exit $ec
        displayName: 'Copy GA/DCR files to VM'

      - script: |
          n=0
          ec=1
          until [ "$n" -ge 5 ]
          do
              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/distros/install_py3.sh $(agentZip.pypyPath)" && ec=0 && break
              n=$((n+1))
              sleep 3
          done
          exit $ec
        displayName: 'Setup test VM'

      - script: |
          n=0
          ec=1
          until [ "$n" -ge 5 ]
          do
              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/scripts/setup_agent.sh $(agentVersion)" && ec=0 && break  # substitute your command here
              n=$((n+1))
              sleep 3
          done
          exit $ec
        displayName: 'Setup dev GA on VM'

      - script: |
          n=0
          ec=1
          until [ "$n" -ge 5 ]
          do
              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/$(distroSetupPath)" && ec=0 && break
              n=$((n+1))
              sleep 3
          done
          exit $ec
        condition: not(eq(variables.distroSetupPath, ''))
        displayName: 'Execute Distro Setup on test VM'

      - script: |
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/run.py ]] && runPy=true || runPy=false
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/run.yml ]] && runYml=true || runYml=false
          [[ -f $(Build.SourcesDirectory)/dcr/scenario/setup.sh ]] && runScenarioSetup=true || runScenarioSetup=false
          echo "##vso[task.setvariable variable=runPy]$runPy"
          echo "##vso[task.setvariable variable=runYml]$runYml"
          echo "##vso[task.setvariable variable=runScenarioSetup]$runScenarioSetup"
        displayName: "Check which file to run"

#      - template: 'run-tests.yml'
#        parameters:
#          scenarioName: $(scenarioName)
#          distroSetupPath: $(distroSetupPath)
#          runPy: $(runPy)
#          runYml: $(runYml)
#          runScenarioSetup: $(runScenarioSetup)

      - script: |
          n=0
          ec=1
          until [ "$n" -ge 5 ]
          do
              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo bash /home/$(adminUsername)/dcr/scenario/setup.sh $(agentZip.pypyPath)" && ec=0 && break  # substitute your command here
              n=$((n+1))
              sleep 3
          done
          exit $ec
        condition: eq(variables.runScenarioSetup, 'true')
        displayName: "Install test dependencies on test VM"

      - template: run-tests.yml
        parameters:
          ymlFilePath: ${{ format('../scenarios/{0}/run.yml', variables.scenarioName) }}

      - script: |
          n=0
          ec=1
          until [ "$n" -ge 1 ]
          do
              ssh -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value) "sudo PYTHONPATH=. $(agentZip.pypyPath) dcr/scenario/run.py" && ec=0 && break  # substitute your command here
              n=$((n+1))
              sleep 3
          done
          exit $ec
        condition: eq(variables.runPy, 'true')
        displayName: "Execute test suite on VM"

      # Here we will run the yml per scenario. The scenarios can specify their specifics there
#      - template: ../agent-bvt/run.yml # ${{ format('../{0}/run.yml', $(scenarioName)) }}

#      - task: PythonScript@0
#        inputs:
#          scriptSource: 'filePath'
#          scriptPath: '$(Build.SourcesDirectory)/dcr/scripts/generate_test_files.py'
#        displayName: "Generate Test Files on host"
#        condition: succeededOrFailed()

      - script: |
          n=0
          ec=1
          until [ "$n" -ge 5 ]
          do
              scp -o StrictHostKeyChecking=no $(adminUsername)@$(armDeploymentOutput.hostname.value):~/test-result-*.xml $(Build.ArtifactStagingDirectory) && ec=0 && break  # substitute your command here
              n=$((n+1))
              sleep 3
          done
          exit $ec
        displayName: 'Fetch test results'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-result-*.xml'
          testRunTitle: 'Publish test results for $(scenarioName)-$(distroName)'